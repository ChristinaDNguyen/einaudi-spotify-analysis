#(acousticness), instrumentalness (instrumentalness), and key and mode
#(key, mode). By looking at these, we track the evolution of track length,
#explore how pace of compositions change over time, see the balance
#between acoustic and electronic elements of the music, see the shift between
#vocal and purely instrumental music, and look for any tonal trends and
#shift in harmonic approaches over the course of Einaudi's career.
install.packages("tidyverse")
devtools::install_github("charlie86/spotifyr")
# Load the libraries
library(spotifyr)
library(tidyverse)
library(lubridate)
install.packages("tidyverse")
library(spotifyr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(caret)
library(usethis) #this package allows me to keep my Spotify client ID and secret in the environment rather than here
devtools::install_github('charlie86/spotifyr')
edit_r_environ()
#Set up the API to add my ID and secret ===========================================================
edit_r_environ()
# Retrieve Spotify credentials from environment variables
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")
# Check if the credentials are being pulled correctly
print(client_id)
print(client_secret)
# Authenticate with Spotify API using the credentials
access_token <- get_spotify_access_token()  # Automatically uses the credentials
# Check the access token (for debugging purposes)
print(access_token)
# Einaudi's Spotify artist ID
artist_id <- "2uFUBdaVGtyMqckSeCl0Qj"
# Einaudi's Spotify artist ID
artist_id <- "2uFUBdaVGtyMqckSeCl0Qj"
# Get the 50 most recent albums
albums <- get_artist_albums(artist_id, limit = 50)
# Extract album IDs and track details
album_ids <- albums$id
# Get all tracks for these albums
tracks <- map_df(album_ids, ~get_album_tracks(.x))
tracks
# Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Preview the data to ensure it's retrieved correctly
head(track_data)
# Clean the data by converting duration from ms to minutes
track_data_clean <- track_data %>%
mutate(duration_min = duration_ms / 60000) %>%
left_join(tracks, by = c("track_id" = "id")) %>%
select(track_name, album, duration_min, tempo, acousticness, instrumentalness, key, mode)
hiness, acousticness, and instrumentallness
track_data_clean <- track_data %>%
mutate(duration_min = duration_ms / 60000) %>%
left_join(tracks, by = c("track_id" = "id")) %>%
select(track_name, album, duration_min, tempo, acousticness, instrumentalness, key, mode)
View(track_data)
track_data_clean <- track_data %>%
mutate(duration_min = duration_ms / 60000) %>%
left_join(tracks, by = c("id" = "id")) %>%
select(track_name, album, duration_min, tempo, acousticness, instrumentalness, key, mode)
rlang::last_trace()
# Clean the data by converting duration from ms to minutes
track_data_clean <- track_data %>%
mutate(duration_min = duration_ms / 60000) %>%
left_join(tracks, by = c("id" = "id")) %>%
select(id, album, duration_min, tempo, acousticness, instrumentalness, key, mode)
rlang::last_trace()
# Step 1: Get the album and track details
albums <- get_artist_albums(artist_id, limit = 50)
album_ids <- albums$id
# Get all tracks for these albums
tracks <- map_df(album_ids, ~get_album_tracks(.x))
# Step 2: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Einaudi's Spotify artist ID
artist_id <- "2uFUBdaVGtyMqckSeCl0Qj"
# Step 1: Get the 50 most recent albums for Einaudi
albums <- get_artist_albums(artist_id, limit = 50)
# Extract album IDs
album_ids <- albums$id
# Step 2: Get all tracks for these albums
tracks <- map_df(album_ids, ~get_album_tracks(.x))
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Step 4: Join track and album information with audio features
track_data_clean <- track_data %>%
left_join(tracks %>% select(id, name, album.name), by = c("id" = "id")) %>%
rename(track_name = name, album_name = album.name) %>%
mutate(duration_min = duration_ms / 60000) %>%
select(track_name, album_name, duration_min, tempo, acousticness, instrumentalness, key, mode)
View(track_data)
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Step 1: Get the 50 most recent albums for Einaudi
albums <- get_artist_albums(artist_id, limit = 50)
albums
# Extract album IDs
album_ids <- albums$id
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)
album_tracks$album_name <- albums$items[albums$id == album_id, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
tracks
View(tracks)
View(track_data)
albums <- get_artist_albums(artist_id, limit = 10)  # Fetch the most recent 10 albums
# Extract album IDs
album_ids <- albums$id
# Step 2: Get all tracks for these albums, including album name
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)
album_tracks$album_name <- albums$items[albums$id == album_id, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Step 4: Join track and album information with audio features
track_data_clean <- track_data %>%
left_join(tracks %>% select(id, name, album_name), by = c("id" = "id")) %>%
rename(track_name = name, album_name = album_name) %>%
select(
track_name,
album_name,
key,
loudness,
speechiness,
acousticness,
instrumentalness,
liveness,
tempo,
duration_ms,
time_signature
)
rlang::last_trace()
View(track_data)
# Extract album IDs
album_ids <- albums$id
album_ids
# Step 2: Get all tracks for these albums, including album name
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)
album_tracks$album_name <- albums$items[albums$id == album_id, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Step 4: Join track and album information with audio features
track_data_clean <- track_data %>%
left_join(tracks %>% select(id, name, album_name), by = c("id" = "id")) %>%
rename(track_name = name, album_name = album_name) %>%
select(
track_name,
album_name,
key,
loudness,
speechiness,
acousticness,
instrumentalness,
liveness,
tempo,
duration_ms,
time_signature
)
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
rlang::last_trace()
track_data_clean <- track_data %>%
left_join(tracks %>% select(id, name, album_id), by = c("id" = "id")) %>%
rename(track_name = name, album_id = album_id) %>%
select(
track_name,
album_id,
key,
acousticness,
instrumentalness,
tempo,
duration_ms,
time_signature
)
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, ~get_track_audio_features(.x))
library(spotifyr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(caret)
library(usethis) #this package allows me to keep my Spotify client ID and secret in the environment rather than here
devtools::install_github('charlie86/spotifyr')
albums <- get_artist_albums(artist_id, limit = 10)
album_ids <- albums$id
album_ids
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)
album_tracks$album_name <- albums$items[albums$id == album_id, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
tracks
View(tracks)
track_data <- map_df(tracks$id, function(track_id) {
audio_features <- get_track_audio_features(track_id)
# Keep relevant columns and add the track name and album name
track_info <- tracks %>% filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features) %>%
select(name, album_name, duration_ms, tempo, key, mode, acousticness, instrumentalness, loudness, speechiness, liveness, time_signature)
return(track_info)
})
# Now pull audio features for each track and keep the relevant data
track_data <- map_df(tracks$id, function(track_id) {
audio_features <- get_track_audio_features(track_id)
# Keep relevant columns and add the track name
track_info <- tracks %>% filter(id == track_id) %>%
select(name) %>%
bind_cols(audio_features) %>%
select(name, duration_ms, tempo, key, mode, acousticness, instrumentalness, loudness, speechiness, liveness, time_signature)
return(track_info)
# Now pull audio features for each track and keep the relevant data
track_data <- map_df(tracks$id, function(track_id) {
audio_features <- get_track_audio_features(track_id)
# Keep relevant columns and add the track name
track_info <- tracks %>% filter(id == track_id) %>%
select(name) %>%
bind_cols(audio_features) %>%
select(name, duration_ms, tempo, key, mode, acousticness, instrumentalness, loudness, speechiness, liveness, time_signature)
return(track_info)
})
track_data <- map_df(tracks$id, function(track_id) {
audio_features <- get_track_audio_features(track_id)
# Keep relevant columns and add the track name
track_info <- tracks %>% filter(id == track_id) %>%
select(name) %>%
bind_cols(audio_features) %>%
select(name, duration_ms, tempo, key, mode, acousticness, instrumentalness, loudness, speechiness, liveness, time_signature)
return(track_info)
})
#This project, "einaudi-spotify-analysis", characterizes compositional
#evolution over time for one neoclassical artist: Ludovico Einaudi. Using the Spotify API for R,
#<spotifyr>, we pull five key metadata attributes that can tell a story
#about his compositional evolution over time. The data will include metadata
#attributes from the 50 most recent albums by this artist.
#Those attributes are duration (duration_ms), tempo (tempo), acousticness
#(acousticness), instrumentalness (instrumentalness), and key and mode
#(key, mode). By looking at these, we track the evolution of track length,
#explore how pace of compositions change over time, see the balance
#between acoustic and electronic elements of the music, see the shift between
#vocal and purely instrumental music, and look for any tonal trends and
#shift in harmonic approaches over the course of Einaudi's career.
install.packages("tidyverse")
devtools::install_github("charlie86/spotifyr")
# Load the libraries
library(spotifyr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(caret)
library(usethis) #this package allows me to keep my Spotify client ID and secret in the environment rather than here
devtools::install_github('charlie86/spotifyr')
#Set up the API to add my ID and secret ===========================================================
edit_r_environ()
# Retrieve Spotify credentials from environment variables
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")
# Check if the credentials are being pulled correctly
print(client_id)
print(client_secret)
# Authenticate with Spotify API using the credentials
access_token <- get_spotify_access_token()  # Automatically uses the credentials
# Check the access token (for debugging purposes)
print(access_token)
##Pul Einaudi data
albums <- get_artist_albums(artist_id, limit = 10)  # Fetch the most recent 10 albums
# Extract album IDs
album_ids <- albums$id
album_ids
# Step 2: Get all tracks for these albums, including album name
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)
album_tracks$album_name <- albums$items[albums$id == album_id, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
tracks
track_data <- map_df(tracks$id, function(track_id) {
audio_features <- get_track_audio_features(track_id)
# Keep relevant columns and add the track name
track_info <- tracks %>% filter(id == track_id) %>%
select(name) %>%
bind_cols(audio_features) %>%
select(name, duration_ms, tempo, key, mode, acousticness, instrumentalness, loudness, speechiness, liveness, time_signature)
return(track_info)
})
rm(list = ls())
# Load the libraries
library(spotifyr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(caret)
library(usethis) #this package allows me to keep my Spotify client ID and secret in the environment rather than here
devtools::install_github('charlie86/spotifyr')
#Set up the API to add my ID and secret ===========================================================
edit_r_environ()
# Retrieve Spotify credentials from environment variables
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")
# Check if the credentials are being pulled correctly
print(client_id)
print(client_secret)
# Authenticate with Spotify API using the credentials
access_token <- get_spotify_access_token()  # Automatically uses the credentials
# Check the access token (for debugging purposes)
print(access_token)
##Pul Einaudi data
albums <- get_artist_albums(artist_id, limit = 10)  # Fetch the most recent 10 albums
# Extract album IDs
album_ids <- albums$id
albums <- get_artist_albums(artist_id, limit = 10)  # Fetch the most recent 10 albums
##Pul Einaudi data
artist_id = "2uFUBdaVGtyMqckSeCl0Qj"
albums <- get_artist_albums(artist_id, limit = 10)  # Fetch the most recent 10 albums
# Extract album IDs
album_ids <- albums$id
album_ids
tracks <- map_df(album_ids, function(album_ids) {
album_tracks <- get_album_tracks(album_ids)
album_tracks$album_name <- albums$items[albums$id == album_id, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
tracks <- map_df(album_ids, function(album_ids) {
album_tracks <- get_album_tracks(album_ids)
album_tracks$album_name <- albums$items[albums$id == album_ids, ]$name  # Add album name to the tracks dataframe
return(album_tracks)
})
tracks
View(tracks)
tracks <- map_df(album_ids, function(album_ids) {
album_tracks <- get_album_tracks(album_ids)
album_tracks$album_name <- albums$items[albums$id == album_ids, ]$name  # Add album ids to the tracks dataframe
return(album_tracks)
})
tracks
View(tracks)
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)  # Get tracks for this album
# Add the album name for the current album
album_name <- albums$items[albums$id == album_id, ]$name
album_tracks$album_name <- album_name  # Assign the album name to the track data
return(album_tracks)  # Return the updated data frame
})
tracks
View(tracks)
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, acousticness,
instrumentalness, loudness, speechiness, liveness, time_signature))
return(track_info)
})
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, time_signature))
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, time_signature))
return(track_info)
})
# Step 3: Get audio features for each track
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, time_signature))
return(track_info)
})
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
tracks
tracks
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, acousticness,
instrumentalness, loudness, speechiness, liveness, time_signature))
return(track_info)
})
# Step 3: Get audio features for each track
library(purr)
# Step 3: Get audio features for each track
library(purrr)
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, acousticness,
instrumentalness, loudness, speechiness, liveness, time_signature))
return(track_info)
})
#This project, "einaudi-spotify-analysis", characterizes compositional
#evolution over time for one neoclassical artist: Ludovico Einaudi. Using the Spotify API for R,
#<spotifyr>, we pull five key metadata attributes that can tell a story
#about his compositional evolution over time. The data will include metadata
#attributes from the 50 most recent albums by this artist.
#Those attributes are duration (duration_ms), tempo (tempo), acousticness
#(acousticness), instrumentalness (instrumentalness), and key and mode
#(key, mode). By looking at these, we track the evolution of track length,
#explore how pace of compositions change over time, see the balance
#between acoustic and electronic elements of the music, see the shift between
#vocal and purely instrumental music, and look for any tonal trends and
#shift in harmonic approaches over the course of Einaudi's career.
install.packages("tidyverse")
devtools::install_github("charlie86/spotifyr")
# Load the libraries
library(spotifyr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(caret)
library(usethis) #this package allows me to keep my Spotify client ID and secret in the environment rather than here
devtools::install_github('charlie86/spotifyr')
#Set up the API to add my ID and secret ===========================================================
edit_r_environ()
# Retrieve Spotify credentials from environment variables
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")
# Check if the credentials are being pulled correctly
print(client_id)
print(client_secret)
# Authenticate with Spotify API using the credentials
access_token <- get_spotify_access_token()  # Automatically uses the credentials
# Check the access token (for debugging purposes)
print(access_token)
##Pul Einaudi data
artist_id = "2uFUBdaVGtyMqckSeCl0Qj"
albums <- get_artist_albums(artist_id, limit = 10)  # Fetch the most recent 10 albums
# Extract album IDs
album_ids <- albums$id
album_ids
# Step 2: Get all tracks for these albums, including album id
tracks <- map_df(album_ids, function(album_id) {
album_tracks <- get_album_tracks(album_id)  # Get tracks for this album
# Add the album name for the current album
album_name <- albums$items[albums$id == album_id, ]$name
album_tracks$album_name <- album_name  # Assign the album name to the track data
return(album_tracks)  # Return the updated data frame
})
tracks
# Step 3: Get audio features for each track
library(purrr)
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, acousticness,
instrumentalness, loudness, speechiness, liveness, time_signature))
return(track_info)
})
# Add a delay of 1 second between requests
track_data <- map_df(tracks$id, function(track_id) {
# Fetch the audio features for the track
audio_features <- get_track_audio_features(track_id)
# Add a 1-second pause to avoid hitting the rate limit
Sys.sleep(1)
# Select the relevant columns (audio features)
track_info <- tracks %>%
filter(id == track_id) %>%
select(name, album_name) %>%
bind_cols(audio_features %>%
select(duration_ms, tempo, key, mode, acousticness,
instrumentalness, loudness, speechiness, liveness, time_signature))
return(track_info)
})
